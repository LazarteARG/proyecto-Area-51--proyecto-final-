/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import controlador.CategoriaData;
import controlador.HabitacionDataBORRADOR;
import controlador.ReservaData;
import java.util.ArrayList;
import javax.swing.JDesktopPane;
import javax.swing.table.DefaultTableModel;
import modelo.Categoria;
import modelo.Habitacion;
import modelo.Huesped;

/**
 *
 * @author valkiria
 */
public class BuscarHabitacion extends javax.swing.JInternalFrame {

    static ArrayList<String> retornos = new ArrayList<>();

    DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    /**
     * Creates new form buscarHabitacion
     */
    public BuscarHabitacion() {
        retornos.clear();
        initComponents();
        agregarCabeceraTabla();
        llenarComboCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        listarTodas = new javax.swing.JRadioButton();
        titulojLabel = new javax.swing.JLabel();
        listarLibres = new javax.swing.JRadioButton();
        listarOcupadas = new javax.swing.JRadioButton();
        listarActivas = new javax.swing.JRadioButton();
        listarInactivas = new javax.swing.JRadioButton();
        pisoFIeld = new javax.swing.JTextField();
        nroHabitacionField = new javax.swing.JTextField();
        nroPisojLabel = new javax.swing.JLabel();
        ayudajLabel = new javax.swing.JLabel();
        categoriajLabel = new javax.swing.JLabel();
        nroHabitacionjLabel1 = new javax.swing.JLabel();
        CategoriasComboBox = new javax.swing.JComboBox<>();
        botonVolver = new javax.swing.JButton();
        cantPersonasField = new javax.swing.JTextField();
        categoriajLabel1 = new javax.swing.JLabel();

        setClosable(true);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        listarTodas.setFont(new java.awt.Font("Perpetua", 0, 15)); // NOI18N
        listarTodas.setText("LISTAR TODAS");
        listarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarTodasActionPerformed(evt);
            }
        });

        titulojLabel.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        titulojLabel.setText("BUSCAR HABITACIONES");

        listarLibres.setFont(new java.awt.Font("Perpetua", 0, 15)); // NOI18N
        listarLibres.setText("LISTAR HABITACIONES LIBRES");
        listarLibres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarLibresActionPerformed(evt);
            }
        });

        listarOcupadas.setFont(new java.awt.Font("Perpetua", 0, 15)); // NOI18N
        listarOcupadas.setText("LISTAR HABITACIONES OCUPADAS");
        listarOcupadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarOcupadasActionPerformed(evt);
            }
        });

        listarActivas.setFont(new java.awt.Font("Perpetua", 0, 15)); // NOI18N
        listarActivas.setText("LISTAR HABITACIONES HABILITADAS");
        listarActivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarActivasActionPerformed(evt);
            }
        });

        listarInactivas.setFont(new java.awt.Font("Perpetua", 0, 15)); // NOI18N
        listarInactivas.setText("LISTAR HABITACIONES EN MANTENIMIENTO");
        listarInactivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarInactivasActionPerformed(evt);
            }
        });

        pisoFIeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pisoFIeldKeyReleased(evt);
            }
        });

        nroHabitacionField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nroHabitacionFieldKeyReleased(evt);
            }
        });

        nroPisojLabel.setFont(new java.awt.Font("Perpetua", 0, 16)); // NOI18N
        nroPisojLabel.setText("Piso:");

        ayudajLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ayudajLabel.setText("Escribe en el/los casillero/s para buscar por el criterio deseado:");

        categoriajLabel.setFont(new java.awt.Font("Perpetua", 0, 16)); // NOI18N
        categoriajLabel.setText("Categoria:");

        nroHabitacionjLabel1.setFont(new java.awt.Font("Perpetua", 0, 16)); // NOI18N
        nroHabitacionjLabel1.setText("NÂ° de Habitacion:");

        CategoriasComboBox.setToolTipText("");
        CategoriasComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriasComboBoxActionPerformed(evt);
            }
        });
        CategoriasComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CategoriasComboBoxPropertyChange(evt);
            }
        });

        botonVolver.setText("Ir a Administrar Habitacion");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });

        cantPersonasField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cantPersonasFieldKeyReleased(evt);
            }
        });

        categoriajLabel1.setFont(new java.awt.Font("Perpetua", 0, 16)); // NOI18N
        categoriajLabel1.setText("Cantidad de personas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(titulojLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nroHabitacionjLabel1)
                            .addComponent(nroPisojLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pisoFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(categoriajLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantPersonasField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nroHabitacionField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(categoriajLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CategoriasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addComponent(botonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listarTodas)
                            .addComponent(listarLibres)
                            .addComponent(listarOcupadas)
                            .addComponent(listarActivas)
                            .addComponent(listarInactivas)))
                    .addComponent(ayudajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(titulojLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(listarTodas)
                        .addGap(18, 18, 18)
                        .addComponent(listarLibres)
                        .addGap(18, 18, 18)
                        .addComponent(listarOcupadas)
                        .addGap(20, 20, 20)
                        .addComponent(listarActivas)
                        .addGap(18, 18, 18)
                        .addComponent(listarInactivas))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addComponent(ayudajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nroHabitacionjLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nroHabitacionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CategoriasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(categoriajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(categoriajLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cantPersonasField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(pisoFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nroPisojLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(botonVolver)))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarTodasActionPerformed
        borrarFilasTabla();
        listarActivas.setSelected(false);
        listarInactivas.setSelected(false);
        listarLibres.setSelected(false);
        listarOcupadas.setSelected(false);
        agregarFilas(HabitacionDataBORRADOR.listaHabitaciones());
    }//GEN-LAST:event_listarTodasActionPerformed

    private void listarLibresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarLibresActionPerformed
        borrarFilasTabla();
        listarActivas.setSelected(false);
        listarInactivas.setSelected(false);
        listarTodas.setSelected(false);
        listarOcupadas.setSelected(false);
        agregarFilas(HabitacionDataBORRADOR.listarHabitacionesLibres());
    }//GEN-LAST:event_listarLibresActionPerformed

    private void listarOcupadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarOcupadasActionPerformed
        borrarFilasTabla();
        listarActivas.setSelected(false);
        listarInactivas.setSelected(false);
        listarLibres.setSelected(false);
        listarTodas.setSelected(false);
        agregarFilas(HabitacionDataBORRADOR.listarHabitacionesOcupadas());
    }//GEN-LAST:event_listarOcupadasActionPerformed

    private void listarActivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarActivasActionPerformed
        borrarFilasTabla();
        listarInactivas.setSelected(false);
        listarLibres.setSelected(false);
        listarTodas.setSelected(false);
        listarOcupadas.setSelected(false);
        agregarFilas(HabitacionDataBORRADOR.listaHabitacionesActivas());
    }//GEN-LAST:event_listarActivasActionPerformed

    private void listarInactivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarInactivasActionPerformed
        borrarFilasTabla();
        listarLibres.setSelected(false);
        listarTodas.setSelected(false);
        listarOcupadas.setSelected(false);
        listarActivas.setSelected(false);
        agregarFilas(HabitacionDataBORRADOR.listaHabitacionesBajas());
    }//GEN-LAST:event_listarInactivasActionPerformed

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        RegistrarHabitacion rh = new RegistrarHabitacion(retornos);
        rh.setVisible(true);
        JDesktopPane desktop = getDesktopPane();

        desktop.add(rh);

        desktop.moveToFront(rh);

        this.dispose();
    }//GEN-LAST:event_botonVolverActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        int filaSeleccionada = tabla.getSelectedRow();
        if (filaSeleccionada != -1) {
            retornos.add(String.valueOf(tabla.getValueAt(filaSeleccionada, 0)));
            retornos.add(String.valueOf(categoriaSeleccionada(String.valueOf(tabla.getValueAt(filaSeleccionada, 1))).getIdCategoria()));
            retornos.add(String.valueOf(tabla.getValueAt(filaSeleccionada, 2)));
            retornos.add(String.valueOf(tabla.getValueAt(filaSeleccionada, 4)));
        }
    }//GEN-LAST:event_tablaMouseClicked

    private void pisoFIeldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pisoFIeldKeyReleased
        int piso = 0;
        try {
            piso = Integer.parseInt(pisoFIeld.getText());
        } catch (NumberFormatException e) {
        }
        buscarPorPiso(piso);
    }//GEN-LAST:event_pisoFIeldKeyReleased

    private void nroHabitacionFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nroHabitacionFieldKeyReleased
        try {
            int id = Integer.parseInt(nroHabitacionField.getText());
            buscarPorId(id);
        } catch (NumberFormatException e) {
        }

    }//GEN-LAST:event_nroHabitacionFieldKeyReleased

    private void CategoriasComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CategoriasComboBoxPropertyChange


    }//GEN-LAST:event_CategoriasComboBoxPropertyChange

    private void CategoriasComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriasComboBoxActionPerformed
        int cat = getIdCategoriaCombo((String) CategoriasComboBox.getSelectedItem());
        ArrayList<Integer> h = new ArrayList<>();
        ArrayList<Habitacion> hs = new ArrayList<>();
        for (Categoria c1 : CategoriaData.listarTodasLasCategorias()) {
            if (c1.getIdCategoria() == cat) {
                h = HabitacionDataBORRADOR.buscarHabitacionesXCategoria(c1.getNombre());
            }
        }
        for (Integer integer : h) {
            hs.add(HabitacionDataBORRADOR.obtenerHabitacionXId(integer));
        }
        agregarFilas(hs);
    }//GEN-LAST:event_CategoriasComboBoxActionPerformed

    private void cantPersonasFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantPersonasFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cantPersonasFieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CategoriasComboBox;
    private javax.swing.JLabel ayudajLabel;
    private javax.swing.JButton botonVolver;
    private javax.swing.JTextField cantPersonasField;
    private javax.swing.JLabel categoriajLabel;
    private javax.swing.JLabel categoriajLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton listarActivas;
    private javax.swing.JRadioButton listarInactivas;
    private javax.swing.JRadioButton listarLibres;
    private javax.swing.JRadioButton listarOcupadas;
    private javax.swing.JRadioButton listarTodas;
    private javax.swing.JTextField nroHabitacionField;
    private javax.swing.JLabel nroHabitacionjLabel1;
    private javax.swing.JLabel nroPisojLabel;
    private javax.swing.JTextField pisoFIeld;
    private static javax.swing.JTable tabla;
    private javax.swing.JLabel titulojLabel;
    // End of variables declaration//GEN-END:variables

    private void borrarFilasTabla() {

        for (int f = modelo.getRowCount() - 1; f > -1; f--) {
            modelo.removeRow(f);
        }
    }

    public void agregarCabeceraTabla() {
        modelo.addColumn("NÂ° de Habitacion");
        modelo.addColumn("Categoria");
        modelo.addColumn("Piso");
        modelo.addColumn("Ocupacion");
        modelo.addColumn("Estado");

        tabla.setModel(modelo);
        tabla.getColumn("Categoria").setPreferredWidth(tabla.getColumn("Categoria").getWidth() + 15);
    }

    public void agregarFila(int id, int idCat, int piso, int estado) {
        String estad = (HabitacionDataBORRADOR.isLibre(new Habitacion(id, idCat, piso, estado))) ? "LIBRE" : "OCUPADA";
        String estado1 = (estado == 1) ? "Habilitada" : "No Habilitada";
        Categoria c = CategoriaData.obtenerCategoriaXId(idCat);
        modelo.addRow(new Object[]{id, c.getNombre(), piso, estad, estado1});
    }

    private Categoria categoriaSeleccionada(String nomCat) {
        for (Categoria c1 : CategoriaData.listarTodasLasCategorias()) {
            if (c1.getNombre().equalsIgnoreCase(nomCat)) {
                return c1;
            }
        }
        return new Categoria();
    }

    public void agregarFilas(ArrayList<Habitacion> lista) {
        borrarFilasTabla();
        for (Habitacion h : lista) {
            agregarFila(h.getIdHabitacion(), h.getIdCategoria(), h.getPiso(), h.getEstado());

        }

    }

    public void llenarComboCategorias() {
        CategoriasComboBox.addItem((String) "SELECCIONE UNA CATEGORIA");
        String texto;
        for (Categoria c : CategoriaData.listarTodasLasCategorias()) {
            texto = c.getIdCategoria() + "_ " + c.getNombre();
            CategoriasComboBox.addItem((String) texto);
        }
    }

    public void buscarPorPiso(int piso) {
        if (piso != 0) {
            borrarFilasTabla();
            ArrayList<Habitacion> hs = HabitacionDataBORRADOR.obtenerHabitacionesXPiso(piso);
            agregarFilas(hs);
        }
    }

    public void buscarPorId(int idHabitacion) {

        if (idHabitacion != 0) {
            borrarFilasTabla();
            Habitacion hs = HabitacionDataBORRADOR.obtenerHabitacionXId(idHabitacion);
            agregarFila(hs.getIdCategoria(), hs.getIdCategoria(), hs.getPiso(), hs.getEstado());
        }
    }

    public int getIdCategoriaCombo(String c) {
        int idC=0;

        try {

            if (c.substring(0, 2).contains("_")) {
                idC = Integer.parseInt(c.substring(0, 1).trim());
            } else if (c.substring(0, 3).contains("_")) {
                idC = Integer.parseInt(c.substring(0, 2));
            } else {
                idC = Integer.parseInt(c.substring(0, 3));
            }
            
        } catch (NumberFormatException e) {
        }
        return idC;
    }

}
